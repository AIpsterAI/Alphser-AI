w3 = Web3(Web3.HTTPProvider('http://127.0.0.1:7545'))  # Replace with your node URL
if not w3.isConnected():
    print("Failed to connect to Ethereum node.")
    exit()

# Set the default account (replace with your account address and private key)
default_account = w3.eth.accounts[0]  # For Ganache, automatically provided
w3.eth.default_account = default_account

# Solidity source code
contract_source_code = '''
pragma solidity ^0.8.0;

contract SimpleStorage {
    uint256 public storedValue;

    event ValueChanged(uint256 newValue);

    function set(uint256 value) public {
        storedValue = value;
        emit ValueChanged(value);
    }

    function get() public view returns (uint256) {
        return storedValue;
    }
}
'''

# Compile the contract using solcx
from solcx import compile_source

compiled_sol = compile_source(contract_source_code)
contract_id, contract_interface = compiled_sol.popitem()

# Get bytecode and ABI
bytecode = contract_interface['bin']
abi = contract_interface['abi']

# Deploy the contract
SimpleStorage = w3.eth.contract(abi=abi, bytecode=bytecode)
tx_hash = SimpleStorage.constructor().transact()
tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

# Get the contract address
contract_address = tx_receipt.contractAddress
print(f"Contract deployed at address: {contract_address}")

# Interact with the contract
simple_storage = w3.eth.contract(address=contract_address, abi=abi)

# Set a value
tx_hash = simple_storage.functions.set(42).transact()
w3.eth.wait_for_transaction_receipt(tx_hash)
print("Value set to 42.")

# Get the stored value
value = simple_storage.functions.get().call()
